

================================================================
===== Usage Example ============================================
================================================================

;; create KD tree
cl-user> (defparameter *kd* (kdtree-jk::build-kdtree 2 :npoints 8))
*kd*

;; look at it
cl-user> *kd*
#S(kdtree-jk:kdtree
   :ndim 2
   :npoints 0
   :needs-balancing nil
   :idepth 0
   :avg-depth 0.0d0
   :npoints-total 8
   :flag-vec #*00000000
   :ir-vec #(-1 -1 -1 -1 -1 -1 -1 -1) 
   :index-left-vec #(-1 -1 -1 -1 -1 -1 -1 -1)
   :index-right-vec #(-1 -1 -1 -1 -1 -1 -1 -1)
   :obj-vec #(nil nil nil nil nil nil nil nil)
   :sd-vec #(0 0 0 0 0 0 0 0)
   :r-vec #2A((0.0d0 0.0d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0))
   :bbox #S(kdtree-jk:bbox
            :ndim 2
            :rmin-vec #(0.0d0 0.0d0)
            :rmax-vec #(0.0d0 0.0d0)))

;; insert 10 points, with the object being a string
cl-user>  (loop with v = (make-array 2 :element-type 'double-float)
		for i below 10
		for object = (format nil "object-~D" i)
		do 
		   (setf (aref v 0) (random 10d0))
		   (setf (aref v 1) (random 10d0))
		   (kdtree-jk::insert-vector *kd* v object))

;; note that tree has expanded to 13 elements (factor of ~1.5)
cl-user> *kd*
#S(kdtree-jk:kdtree
   :ndim 2
   :npoints 10
   :needs-balancing nil
   :idepth 3
   :avg-depth 1.2d0
   :npoints-total 13
   :flag-vec #*1111111111000
   :ir-vec #(0 1 2 3 4 5 6 7 8 9 -1 -1 -1)
   :index-left-vec #(1 2 7 6 8 -1 9 -1 -1 -1 -1 -1 -1)
   :index-right-vec #(3 5 4 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1)
   :obj-vec #("object-0" "object-1" "object-2" "object-3" "object-4" "object-5"
              "object-6" "object-7" "object-8" "object-9" nil nil nil)
   :sd-vec #(0 1 0 1 1 0 0 1 0 1 0 0 0)
   :r-vec #2A((5.935203326093315d0 5.105117606938368d0)
              (2.7310586222776823d0 8.802804536254886d0)
              (2.286403962302186d0 4.698585577562541d0)
              (6.187378412604405d0 9.35440905251598d0)
              (4.973436366002762d0 5.338583701931789d0)
              (4.080494323866947d0 9.189060767072345d0)
              (7.601027733975121d0 7.108452075277823d0)
              (0.1384111205078531d0 2.856169934794337d0)
              (4.972991335270802d0 2.7570119300436735d0)
              (5.944462248730624d0 8.723228331712976d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0))
   :bbox #S(kdtree-jk:bbox
            :ndim 2
            :rmin-vec #(0.1384111205078531d0 2.7570119300436735d0)
            :rmax-vec #(7.601027733975121d0 9.35440905251598d0)))


;; search in radius of 3 around #(2 3), returning a kd-result
cl-user> (kdtree-jk:kd-search-in-radius
	  *kd* 
	  (make-array 2 :element-type 'double-float
			:initial-contents '(2d0 3d0)) 
	  3d0)

#S(kdtree-jk:kdresult
   :n 3
   :obj-vec #("object-2" "object-7" "object-8" nil nil nil nil nil nil nil)
   :index-vec #(2 7 8 -1 -1 -1 -1 -1 -1 -1)
   :dist-vec #(1.7225621016166193d0 1.8671369108626963d0 2.9829047389644154d0
               0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0))


;; delete these objects
cl-user> (kdtree-jk:kd-search-in-radius
	  *kd* 
	  (make-array 2 :element-type 'double-float
			:initial-contents '(2d0 3d0)) 
	  3d0
          :action (kdtree-jk:make-deletion-action))
nil

;; deleted objects stay in the tree as ignored nodes
cl-user> *kd*
#S(kdtree-jk:kdtree
   :ndim 2
   :npoints 10
   :needs-balancing nil
   :idepth 3
   :avg-depth 1.2d0
   :npoints-total 13
   :flag-vec #*1111111111000
   :ir-vec #(0 1 2 3 4 5 6 7 8 9 -1 -1 -1)
   :index-left-vec #(1 2 7 6 8 -1 9 -1 -1 -1 -1 -1 -1)
   :index-right-vec #(3 5 4 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1)
   :obj-vec #("object-0" "object-1" kdtree-jk::deleted-object "object-3"
              "object-4" "object-5" "object-6" kdtree-jk::deleted-object
              kdtree-jk::deleted-object "object-9" nil nil nil)
   :sd-vec #(0 1 0 1 1 0 0 1 0 1 0 0 0)
   :r-vec #2A((5.935203326093315d0 5.105117606938368d0)
              (2.7310586222776823d0 8.802804536254886d0)
              (2.286403962302186d0 4.698585577562541d0)
              (6.187378412604405d0 9.35440905251598d0)
              (4.973436366002762d0 5.338583701931789d0)
              (4.080494323866947d0 9.189060767072345d0)
              (7.601027733975121d0 7.108452075277823d0)
              (0.1384111205078531d0 2.856169934794337d0)
              (4.972991335270802d0 2.7570119300436735d0)
              (5.944462248730624d0 8.723228331712976d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0))
   :bbox #S(kdtree-jk:bbox  ;; WARNING - bounding box includes deleted nodes
            :ndim 2
            :rmin-vec #(0.1384111205078531d0 2.7570119300436735d0)
            :rmax-vec #(7.601027733975121d0 9.35440905251598d0)))

;; now the same search returns nothing
cl-user> (kdtree-jk:kd-search-in-radius
	  *kd* 
	  (make-array 2 :element-type 'double-float
			:initial-contents '(2d0 3d0)) 
	  3d0)
#S(kdtree-jk:kdresult
   :n 0
   :obj-vec #(nil nil nil nil nil nil nil nil nil nil)
   :index-vec #(-1 -1 -1 -1 -1 -1 -1 -1 -1 -1)
   :dist-vec #(0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0))


;; clean up tree using balance-kdtree; this will also get rid of deleted nodes.

cl-user> (kdtree-jk:balance-kdtree *kd*)
t
cl-user> *kd*
#S(kdtree-jk:kdtree
   :ndim 2
   :npoints 7
   :needs-balancing nil
   :idepth 2
   :avg-depth 1.4285714285714284d0
   :npoints-total 13
   :flag-vec #*1111111000000
   :ir-vec #(0 1 3 4 6 5 2 -1 -1 -1 -1 -1 -1)
   :index-left-vec #(1 2 -1 -1 5 -1 -1 -1 -1 -1 -1 -1 -1)
   :index-right-vec #(4 3 -1 -1 6 -1 -1 -1 -1 -1 -1 -1 -1)
   :obj-vec #("object-0" "object-1" "object-3" "object-4" "object-5" "object-6"
              "object-9" nil nil nil nil nil nil)
   :sd-vec #(0 1 0 0 1 0 0 0 0 0 0 0 0)
   :r-vec #2A((5.935203326093315d0 5.105117606938368d0)
              (2.7310586222776823d0 8.802804536254886d0)
              (6.187378412604405d0 9.35440905251598d0)
              (4.973436366002762d0 5.338583701931789d0)
              (4.080494323866947d0 9.189060767072345d0)
              (7.601027733975121d0 7.108452075277823d0)
              (5.944462248730624d0 8.723228331712976d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0))
   :bbox #S(kdtree-jk:bbox ;; bounding box fixed
            :ndim 2
            :rmin-vec #(2.7310586222776823d0 5.105117606938368d0)
            :rmax-vec #(7.601027733975121d0 9.35440905251598d0)))


;; shrink it, if we wish

cl-user> (kdtree-jk:kdtree-minimize-size *kd*)
7
cl-user> *kd*
#S(kdtree-jk:kdtree
   :ndim 2
   :npoints 7
   :needs-balancing nil
   :idepth 2
   :avg-depth 1.4285714285714284d0
   :npoints-total 7
   :flag-vec #*1111111
   :ir-vec #(0 1 3 4 6 5 2)
   :index-left-vec #(1 2 -1 -1 5 -1 -1)
   :index-right-vec #(4 3 -1 -1 6 -1 -1)
   :obj-vec #("object-0" "object-1" "object-3" "object-4" "object-5" "object-6"
              "object-9")
   :sd-vec #(0 1 0 0 1 0 0)
   :r-vec #2A((5.935203326093315d0 5.105117606938368d0)
              (2.7310586222776823d0 8.802804536254886d0)
              (6.187378412604405d0 9.35440905251598d0)
              (4.973436366002762d0 5.338583701931789d0)
              (4.080494323866947d0 9.189060767072345d0)
              (7.601027733975121d0 7.108452075277823d0)
              (5.944462248730624d0 8.723228331712976d0))
   :bbox #S(kdtree-jk:bbox
            :ndim 2
            :rmin-vec #(2.7310586222776823d0 5.105117606938368d0)
            :rmax-vec #(7.601027733975121d0 9.35440905251598d0)))


;; insert some points but DEFER placing into tree
;; (faster for bulk insertion, then allows balancing)

cl-user>  (loop with v = (make-array 2 :element-type 'double-float)
		for i below 3
		for object = (format nil "object-~DB" i) ;; name them with 'B'
		do 
		   (setf (aref v 0) (random 10d0))
		   (setf (aref v 1) (random 10d0))
		   (kdtree-jk::insert-vector *kd* v object 
					     :defer t))
		    
nil

cl-user> *kd*
#S(kdtree-jk:kdtree
   :ndim 2
   :npoints 10
   :needs-balancing t ;; NB - new points not in tree, only in r-vec and obj-vec
   :idepth 2
   :avg-depth 0.9999999999999999d0
   :npoints-total 12
   :flag-vec #*111111111100
   :ir-vec #(0 1 3 4 6 5 2 7 8 9 -1 -1)
   :index-left-vec #(1 2 -1 -1 5 -1 -1 -1 -1 -1 -1 -1)
   :index-right-vec #(4 3 -1 -1 6 -1 -1 -1 -1 -1 -1 -1)
   :obj-vec #("object-0" "object-1" "object-3" "object-4" "object-5" "object-6"
              "object-9" "object-0B" "object-1B" "object-2B" nil nil)
   :sd-vec #(0 1 0 0 1 0 0 0 0 0 0 0)
   :r-vec #2A((5.935203326093315d0 5.105117606938368d0)
              (2.7310586222776823d0 8.802804536254886d0)
              (6.187378412604405d0 9.35440905251598d0)
              (4.973436366002762d0 5.338583701931789d0)
              (4.080494323866947d0 9.189060767072345d0)
              (7.601027733975121d0 7.108452075277823d0)
              (5.944462248730624d0 8.723228331712976d0)
              (5.881732660955303d0 9.862030933066134d0)
              (2.1724224176494067d0 8.972378631652987d0)
              (5.061980634929508d0 7.903482774948518d0)
              (0.0d0 0.0d0)
              (0.0d0 0.0d0))
   :bbox #S(kdtree-jk:bbox
            :ndim 2
            :rmin-vec #(2.1724224176494067d0 5.105117606938368d0)
            :rmax-vec #(7.601027733975121d0 9.862030933066134d0)))

;; it will generate an error to search the tree after a DEFER, so we
;;   balance the tree

cl-user> (kdtree-jk:balance-kdtree *kd*)

;; try a bounding-box search

;; first make the BBOX

cl-user> (defparameter *bbox* (kdtree-jk:build-bbox '(1 5) '(4 10)))
*bbox*
cl-user> *bbox*
#S(kdtree-jk:bbox
   :ndim 2
   :rmin-vec #(1.0d0 5.0d0)
   :rmax-vec #(4.0d0 10.0d0))


;; then search it
cl-user> (kdtree-jk:kd-search-in-bbox *kd* *bbox*)
#S(kdtree-jk:kdresult
   :n 2
   :obj-vec #("object-1" "object-1B" nil nil nil nil nil nil nil nil)
   :index-vec #(1 3 -1 -1 -1 -1 -1 -1 -1 -1)
   :dist-vec #(0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0))
